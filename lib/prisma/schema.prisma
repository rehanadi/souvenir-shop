// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                String     @id @default(cuid())
  name              String?
  email             String?    @unique
  emailVerified     DateTime?  @map("email_verified")
  image             String?
  isAdmin           Boolean    @default(false)
  createdAt         DateTime   @default(now()) @map(name: "created_at")
  updatedAt         DateTime   @updatedAt @map(name: "updated_at")
  accounts          Account[]
  sessions          Session[]
  createdProducts   Product[]  @relation("CreatedProducts")
  updatedProducts   Product[]  @relation("UpdatedProducts")
  createdCategories Category[] @relation("CreatedCategories")
  updatedCategories Category[] @relation("UpdatedCategories")
  orders            Order[]    @relation("Orders")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id            String      @id @default(cuid())
  name          String
  slug          String      @unique
  image         String?
  description   String?
  price         Float       @default(0)
  isUseStock    Boolean     @default(false) @map(name: "is_use_stock")
  baseStock     Float       @default(0) @map(name: "base_stock")
  usedStock     Float       @default(0) @map(name: "used_stock")
  remainStock   Float       @default(0) @map(name: "remain_stock")
  rating        Float       @default(0)
  reviewsCount  Float       @default(0) @map(name: "reviews_count")
  isActive      Boolean     @default(true) @map(name: "is_active")
  createdBy     String?     @map(name: "created_by")
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedBy     String?     @map(name: "updated_by")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  createdByUser User?       @relation("CreatedProducts", fields: [createdBy], references: [id])
  updatedByUser User?       @relation("UpdatedProducts", fields: [updatedBy], references: [id])
  categories    Category[]
  orderItems    OrderItem[]

  @@index([slug])
  @@map(name: "products")
}

model Category {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  createdBy     String?   @map(name: "created_by")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedBy     String?   @map(name: "updated_by")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  createdByUser User?     @relation("CreatedCategories", fields: [createdBy], references: [id])
  updatedByUser User?     @relation("UpdatedCategories", fields: [updatedBy], references: [id])
  products      Product[]

  @@index([slug])
  @@map(name: "categories")
}

model Slider {
  id        String   @id @default(cuid())
  name      String
  image     String
  caption   String?
  url       String?
  isActive  Boolean  @default(true) @map(name: "is_active")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "sliders")
}

model PaymentChannel {
  id             String          @id @default(cuid())
  name           String
  code           String          @unique
  position       Int             @default(1)
  isActive       Boolean         @default(true) @map(name: "is_active")
  createdAt      DateTime        @default(now()) @map(name: "created_at")
  updatedAt      DateTime        @updatedAt @map(name: "updated_at")
  paymentMethods PaymentMethod[]

  @@index([code])
  @@map(name: "payment_channels")
}

model PaymentMethod {
  id            String         @id @default(cuid())
  name          String
  code          String         @unique
  image         String
  minimumAmount Float          @default(1) @map(name: "minimum_amount")
  position      Int            @default(1)
  channelId     String         @map(name: "channel_id")
  isActive      Boolean        @default(true) @map(name: "is_active")
  createdAt     DateTime       @default(now()) @map(name: "created_at")
  updatedAt     DateTime       @updatedAt @map(name: "updated_at")
  channel       PaymentChannel @relation(fields: [channelId], references: [id])

  @@index([code])
  @@map(name: "payment_methods")
}

model Order {
  id                String          @id @default(uuid())
  userId            String          @map(name: "user_id")
  itemsPrice        Float           @default(0) @map(name: "items_price")
  shippingPrice     Float           @default(0) @map(name: "shipping_price")
  totalPrice        Float           @default(0) @map(name: "total_price")
  paymentMethod     String          @map(name: "payment_method")
  paymentResult     Json?           @default("{}") @map(name: "payment_result")
  paymentStatus     String          @default("PENDING") @map(name: "payment_status")
  paymentDate       DateTime?       @map(name: "payment_date")
  shippingAddressId String          @unique
  shippingCourier   String          @map(name: "shipping_courier")
  shippingService   String          @map(name: "shipping_service")
  shippingStatus    String          @default("PENDING") @map(name: "shipping_status")
  shippingDate      DateTime?       @map(name: "shipping_date")
  createdAt         DateTime        @default(now()) @map(name: "created_at")
  updatedAt         DateTime        @updatedAt @map(name: "updated_at")
  user              User            @relation("Orders", fields: [userId], references: [id])
  items             OrderItem[]
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])

  @@index([shippingAddressId])
  @@map(name: "orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String   @map(name: "order_id")
  productId String   @map(name: "product_id")
  name      String
  image     String?
  price     Float    @default(0)
  qty       Float    @default(0)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@map(name: "order_items")
}

model ShippingAddress {
  id            String   @id @default(cuid())
  firstName     String   @map(name: "first_name")
  lastName      String   @map(name: "last_name")
  address       String
  provinceId    String   @map(name: "province_id")
  province      String
  cityId        String   @map(name: "city_id")
  city          String
  subdistrictId String   @map(name: "subdistrict_id")
  subdistrict   String
  postalCode    String   @map(name: "postal_code")
  phone         String
  company       String?
  comments      String?
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")
  order         Order?

  @@map(name: "shipping_addresses")
}
